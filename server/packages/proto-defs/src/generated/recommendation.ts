// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: recommendation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "recommendation";

/** Request message for course recommendations */
export interface RecommendationRequest {
  /** Array of topics (e.g., ["JavaScript", "React"]) */
  topics: string[];
  /** Skill level: "beginner", "intermediate", "advanced" */
  skill_level: string;
  /** Optional: preferred duration (e.g., "short", "long") */
  preferred_duration: string;
  /** Number of recommendations to return (default: 5) */
  limit: number;
}

/** Single course recommendation */
export interface CourseRecommendation {
  title: string;
  description: string;
  category: string;
  skill_level: string;
  duration: string;
  instructor: string;
  /** 0-1 score indicating relevance */
  relevance_score: number;
  /** Matching topics */
  topics: string[];
}

/** Response message with recommendations */
export interface RecommendationResponse {
  recommendations: CourseRecommendation[];
  message: string;
  total_count: number;
}

function createBaseRecommendationRequest(): RecommendationRequest {
  return { topics: [], skill_level: "", preferred_duration: "", limit: 0 };
}

export const RecommendationRequest: MessageFns<RecommendationRequest> = {
  encode(message: RecommendationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.topics) {
      writer.uint32(10).string(v!);
    }
    if (message.skill_level !== "") {
      writer.uint32(18).string(message.skill_level);
    }
    if (message.preferred_duration !== "") {
      writer.uint32(26).string(message.preferred_duration);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.topics.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skill_level = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.preferred_duration = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendationRequest {
    return {
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => globalThis.String(e)) : [],
      skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
      preferred_duration: isSet(object.preferred_duration) ? globalThis.String(object.preferred_duration) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: RecommendationRequest): unknown {
    const obj: any = {};
    if (message.topics?.length) {
      obj.topics = message.topics;
    }
    if (message.skill_level !== "") {
      obj.skill_level = message.skill_level;
    }
    if (message.preferred_duration !== "") {
      obj.preferred_duration = message.preferred_duration;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecommendationRequest>, I>>(base?: I): RecommendationRequest {
    return RecommendationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecommendationRequest>, I>>(object: I): RecommendationRequest {
    const message = createBaseRecommendationRequest();
    message.topics = object.topics?.map((e) => e) || [];
    message.skill_level = object.skill_level ?? "";
    message.preferred_duration = object.preferred_duration ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseCourseRecommendation(): CourseRecommendation {
  return {
    title: "",
    description: "",
    category: "",
    skill_level: "",
    duration: "",
    instructor: "",
    relevance_score: 0,
    topics: [],
  };
}

export const CourseRecommendation: MessageFns<CourseRecommendation> = {
  encode(message: CourseRecommendation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.category !== "") {
      writer.uint32(26).string(message.category);
    }
    if (message.skill_level !== "") {
      writer.uint32(34).string(message.skill_level);
    }
    if (message.duration !== "") {
      writer.uint32(42).string(message.duration);
    }
    if (message.instructor !== "") {
      writer.uint32(50).string(message.instructor);
    }
    if (message.relevance_score !== 0) {
      writer.uint32(61).float(message.relevance_score);
    }
    for (const v of message.topics) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseRecommendation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseRecommendation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.skill_level = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.duration = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.instructor = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.relevance_score = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.topics.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseRecommendation {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "",
      instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
      relevance_score: isSet(object.relevance_score) ? globalThis.Number(object.relevance_score) : 0,
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CourseRecommendation): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.skill_level !== "") {
      obj.skill_level = message.skill_level;
    }
    if (message.duration !== "") {
      obj.duration = message.duration;
    }
    if (message.instructor !== "") {
      obj.instructor = message.instructor;
    }
    if (message.relevance_score !== 0) {
      obj.relevance_score = message.relevance_score;
    }
    if (message.topics?.length) {
      obj.topics = message.topics;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseRecommendation>, I>>(base?: I): CourseRecommendation {
    return CourseRecommendation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseRecommendation>, I>>(object: I): CourseRecommendation {
    const message = createBaseCourseRecommendation();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.category = object.category ?? "";
    message.skill_level = object.skill_level ?? "";
    message.duration = object.duration ?? "";
    message.instructor = object.instructor ?? "";
    message.relevance_score = object.relevance_score ?? 0;
    message.topics = object.topics?.map((e) => e) || [];
    return message;
  },
};

function createBaseRecommendationResponse(): RecommendationResponse {
  return { recommendations: [], message: "", total_count: 0 };
}

export const RecommendationResponse: MessageFns<RecommendationResponse> = {
  encode(message: RecommendationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.recommendations) {
      CourseRecommendation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.total_count !== 0) {
      writer.uint32(24).int32(message.total_count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecommendationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecommendationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recommendations.push(CourseRecommendation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total_count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecommendationResponse {
    return {
      recommendations: globalThis.Array.isArray(object?.recommendations)
        ? object.recommendations.map((e: any) => CourseRecommendation.fromJSON(e))
        : [],
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      total_count: isSet(object.total_count) ? globalThis.Number(object.total_count) : 0,
    };
  },

  toJSON(message: RecommendationResponse): unknown {
    const obj: any = {};
    if (message.recommendations?.length) {
      obj.recommendations = message.recommendations.map((e) => CourseRecommendation.toJSON(e));
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.total_count !== 0) {
      obj.total_count = Math.round(message.total_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecommendationResponse>, I>>(base?: I): RecommendationResponse {
    return RecommendationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecommendationResponse>, I>>(object: I): RecommendationResponse {
    const message = createBaseRecommendationResponse();
    message.recommendations = object.recommendations?.map((e) => CourseRecommendation.fromPartial(e)) || [];
    message.message = object.message ?? "";
    message.total_count = object.total_count ?? 0;
    return message;
  },
};

/** Recommendation Service */
export type RecommendationServiceService = typeof RecommendationServiceService;
export const RecommendationServiceService = {
  /** Get course recommendations based on user preferences */
  getRecommendations: {
    path: "/recommendation.RecommendationService/GetRecommendations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RecommendationRequest): Buffer =>
      Buffer.from(RecommendationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RecommendationRequest => RecommendationRequest.decode(value),
    responseSerialize: (value: RecommendationResponse): Buffer =>
      Buffer.from(RecommendationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RecommendationResponse => RecommendationResponse.decode(value),
  },
} as const;

export interface RecommendationServiceServer extends UntypedServiceImplementation {
  /** Get course recommendations based on user preferences */
  getRecommendations: handleUnaryCall<RecommendationRequest, RecommendationResponse>;
}

export interface RecommendationServiceClient extends Client {
  /** Get course recommendations based on user preferences */
  getRecommendations(
    request: RecommendationRequest,
    callback: (error: ServiceError | null, response: RecommendationResponse) => void,
  ): ClientUnaryCall;
  getRecommendations(
    request: RecommendationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RecommendationResponse) => void,
  ): ClientUnaryCall;
  getRecommendations(
    request: RecommendationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RecommendationResponse) => void,
  ): ClientUnaryCall;
}

export const RecommendationServiceClient = makeGenericClientConstructor(
  RecommendationServiceService,
  "recommendation.RecommendationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RecommendationServiceClient;
  service: typeof RecommendationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
