// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: course.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "course";

export interface CourseUploadRequest {
  courses: CourseData[];
}

export interface CourseData {
  course_id: string;
  title: string;
  description: string;
  category: string;
  instructor: string;
  duration: string;
  /** beginner, intermediate, advanced */
  skill_level: string;
  tags: string[];
}

export interface CourseUploadResponse {
  success: boolean;
  message: string;
  courses_uploaded: number;
  courses_indexed: number;
}

export interface CourseSearchRequest {
  /** Search keyword */
  query: string;
  /** Filter by category */
  category: string;
  /** Filter by instructor */
  instructor: string;
  /** Filter by skill level */
  skill_level: string;
  /** Number of results (default: 10) */
  limit: number;
  /** Pagination offset */
  offset: number;
}

export interface Course {
  id: string;
  course_id: string;
  title: string;
  description: string;
  category: string;
  instructor: string;
  duration: string;
  skill_level: string;
  tags: string[];
  /** Elasticsearch score */
  relevance_score: number;
}

export interface CourseSearchResponse {
  courses: Course[];
  total_count: number;
  message: string;
  /** Indicates if result is from cache */
  from_cache: boolean;
}

export interface CourseGetRequest {
  course_id: string;
}

export interface CourseGetResponse {
  course?: Course | undefined;
  message: string;
  from_cache: boolean;
}

function createBaseCourseUploadRequest(): CourseUploadRequest {
  return { courses: [] };
}

export const CourseUploadRequest: MessageFns<CourseUploadRequest> = {
  encode(message: CourseUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.courses) {
      CourseData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseUploadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.courses.push(CourseData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseUploadRequest {
    return {
      courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e: any) => CourseData.fromJSON(e)) : [],
    };
  },

  toJSON(message: CourseUploadRequest): unknown {
    const obj: any = {};
    if (message.courses?.length) {
      obj.courses = message.courses.map((e) => CourseData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseUploadRequest>, I>>(base?: I): CourseUploadRequest {
    return CourseUploadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseUploadRequest>, I>>(object: I): CourseUploadRequest {
    const message = createBaseCourseUploadRequest();
    message.courses = object.courses?.map((e) => CourseData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCourseData(): CourseData {
  return {
    course_id: "",
    title: "",
    description: "",
    category: "",
    instructor: "",
    duration: "",
    skill_level: "",
    tags: [],
  };
}

export const CourseData: MessageFns<CourseData> = {
  encode(message: CourseData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.course_id !== "") {
      writer.uint32(10).string(message.course_id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    if (message.instructor !== "") {
      writer.uint32(42).string(message.instructor);
    }
    if (message.duration !== "") {
      writer.uint32(50).string(message.duration);
    }
    if (message.skill_level !== "") {
      writer.uint32(58).string(message.skill_level);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.course_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.instructor = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.duration = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.skill_level = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseData {
    return {
      course_id: isSet(object.course_id) ? globalThis.String(object.course_id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "",
      skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CourseData): unknown {
    const obj: any = {};
    if (message.course_id !== "") {
      obj.course_id = message.course_id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.instructor !== "") {
      obj.instructor = message.instructor;
    }
    if (message.duration !== "") {
      obj.duration = message.duration;
    }
    if (message.skill_level !== "") {
      obj.skill_level = message.skill_level;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseData>, I>>(base?: I): CourseData {
    return CourseData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseData>, I>>(object: I): CourseData {
    const message = createBaseCourseData();
    message.course_id = object.course_id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.category = object.category ?? "";
    message.instructor = object.instructor ?? "";
    message.duration = object.duration ?? "";
    message.skill_level = object.skill_level ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseCourseUploadResponse(): CourseUploadResponse {
  return { success: false, message: "", courses_uploaded: 0, courses_indexed: 0 };
}

export const CourseUploadResponse: MessageFns<CourseUploadResponse> = {
  encode(message: CourseUploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.courses_uploaded !== 0) {
      writer.uint32(24).int32(message.courses_uploaded);
    }
    if (message.courses_indexed !== 0) {
      writer.uint32(32).int32(message.courses_indexed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseUploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.courses_uploaded = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.courses_indexed = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseUploadResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      courses_uploaded: isSet(object.courses_uploaded) ? globalThis.Number(object.courses_uploaded) : 0,
      courses_indexed: isSet(object.courses_indexed) ? globalThis.Number(object.courses_indexed) : 0,
    };
  },

  toJSON(message: CourseUploadResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.courses_uploaded !== 0) {
      obj.courses_uploaded = Math.round(message.courses_uploaded);
    }
    if (message.courses_indexed !== 0) {
      obj.courses_indexed = Math.round(message.courses_indexed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseUploadResponse>, I>>(base?: I): CourseUploadResponse {
    return CourseUploadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseUploadResponse>, I>>(object: I): CourseUploadResponse {
    const message = createBaseCourseUploadResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.courses_uploaded = object.courses_uploaded ?? 0;
    message.courses_indexed = object.courses_indexed ?? 0;
    return message;
  },
};

function createBaseCourseSearchRequest(): CourseSearchRequest {
  return { query: "", category: "", instructor: "", skill_level: "", limit: 0, offset: 0 };
}

export const CourseSearchRequest: MessageFns<CourseSearchRequest> = {
  encode(message: CourseSearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.instructor !== "") {
      writer.uint32(26).string(message.instructor);
    }
    if (message.skill_level !== "") {
      writer.uint32(34).string(message.skill_level);
    }
    if (message.limit !== 0) {
      writer.uint32(40).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(48).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseSearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.instructor = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.skill_level = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseSearchRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
      skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: CourseSearchRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.instructor !== "") {
      obj.instructor = message.instructor;
    }
    if (message.skill_level !== "") {
      obj.skill_level = message.skill_level;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseSearchRequest>, I>>(base?: I): CourseSearchRequest {
    return CourseSearchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseSearchRequest>, I>>(object: I): CourseSearchRequest {
    const message = createBaseCourseSearchRequest();
    message.query = object.query ?? "";
    message.category = object.category ?? "";
    message.instructor = object.instructor ?? "";
    message.skill_level = object.skill_level ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseCourse(): Course {
  return {
    id: "",
    course_id: "",
    title: "",
    description: "",
    category: "",
    instructor: "",
    duration: "",
    skill_level: "",
    tags: [],
    relevance_score: 0,
  };
}

export const Course: MessageFns<Course> = {
  encode(message: Course, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.course_id !== "") {
      writer.uint32(18).string(message.course_id);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.category !== "") {
      writer.uint32(42).string(message.category);
    }
    if (message.instructor !== "") {
      writer.uint32(50).string(message.instructor);
    }
    if (message.duration !== "") {
      writer.uint32(58).string(message.duration);
    }
    if (message.skill_level !== "") {
      writer.uint32(66).string(message.skill_level);
    }
    for (const v of message.tags) {
      writer.uint32(74).string(v!);
    }
    if (message.relevance_score !== 0) {
      writer.uint32(85).float(message.relevance_score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Course {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.course_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.instructor = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.duration = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.skill_level = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.relevance_score = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Course {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      course_id: isSet(object.course_id) ? globalThis.String(object.course_id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "",
      skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      relevance_score: isSet(object.relevance_score) ? globalThis.Number(object.relevance_score) : 0,
    };
  },

  toJSON(message: Course): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.course_id !== "") {
      obj.course_id = message.course_id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.instructor !== "") {
      obj.instructor = message.instructor;
    }
    if (message.duration !== "") {
      obj.duration = message.duration;
    }
    if (message.skill_level !== "") {
      obj.skill_level = message.skill_level;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.relevance_score !== 0) {
      obj.relevance_score = message.relevance_score;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Course>, I>>(base?: I): Course {
    return Course.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Course>, I>>(object: I): Course {
    const message = createBaseCourse();
    message.id = object.id ?? "";
    message.course_id = object.course_id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.category = object.category ?? "";
    message.instructor = object.instructor ?? "";
    message.duration = object.duration ?? "";
    message.skill_level = object.skill_level ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.relevance_score = object.relevance_score ?? 0;
    return message;
  },
};

function createBaseCourseSearchResponse(): CourseSearchResponse {
  return { courses: [], total_count: 0, message: "", from_cache: false };
}

export const CourseSearchResponse: MessageFns<CourseSearchResponse> = {
  encode(message: CourseSearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.courses) {
      Course.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total_count !== 0) {
      writer.uint32(16).int32(message.total_count);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.from_cache !== false) {
      writer.uint32(32).bool(message.from_cache);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseSearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.courses.push(Course.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total_count = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.from_cache = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseSearchResponse {
    return {
      courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e: any) => Course.fromJSON(e)) : [],
      total_count: isSet(object.total_count) ? globalThis.Number(object.total_count) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      from_cache: isSet(object.from_cache) ? globalThis.Boolean(object.from_cache) : false,
    };
  },

  toJSON(message: CourseSearchResponse): unknown {
    const obj: any = {};
    if (message.courses?.length) {
      obj.courses = message.courses.map((e) => Course.toJSON(e));
    }
    if (message.total_count !== 0) {
      obj.total_count = Math.round(message.total_count);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.from_cache !== false) {
      obj.from_cache = message.from_cache;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseSearchResponse>, I>>(base?: I): CourseSearchResponse {
    return CourseSearchResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseSearchResponse>, I>>(object: I): CourseSearchResponse {
    const message = createBaseCourseSearchResponse();
    message.courses = object.courses?.map((e) => Course.fromPartial(e)) || [];
    message.total_count = object.total_count ?? 0;
    message.message = object.message ?? "";
    message.from_cache = object.from_cache ?? false;
    return message;
  },
};

function createBaseCourseGetRequest(): CourseGetRequest {
  return { course_id: "" };
}

export const CourseGetRequest: MessageFns<CourseGetRequest> = {
  encode(message: CourseGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.course_id !== "") {
      writer.uint32(10).string(message.course_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.course_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseGetRequest {
    return { course_id: isSet(object.course_id) ? globalThis.String(object.course_id) : "" };
  },

  toJSON(message: CourseGetRequest): unknown {
    const obj: any = {};
    if (message.course_id !== "") {
      obj.course_id = message.course_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseGetRequest>, I>>(base?: I): CourseGetRequest {
    return CourseGetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseGetRequest>, I>>(object: I): CourseGetRequest {
    const message = createBaseCourseGetRequest();
    message.course_id = object.course_id ?? "";
    return message;
  },
};

function createBaseCourseGetResponse(): CourseGetResponse {
  return { message: "", from_cache: false };
}

export const CourseGetResponse: MessageFns<CourseGetResponse> = {
  encode(message: CourseGetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.course !== undefined) {
      Course.encode(message.course, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.from_cache !== false) {
      writer.uint32(24).bool(message.from_cache);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CourseGetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCourseGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.course = Course.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.from_cache = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CourseGetResponse {
    return {
      course: isSet(object.course) ? Course.fromJSON(object.course) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      from_cache: isSet(object.from_cache) ? globalThis.Boolean(object.from_cache) : false,
    };
  },

  toJSON(message: CourseGetResponse): unknown {
    const obj: any = {};
    if (message.course !== undefined) {
      obj.course = Course.toJSON(message.course);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.from_cache !== false) {
      obj.from_cache = message.from_cache;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CourseGetResponse>, I>>(base?: I): CourseGetResponse {
    return CourseGetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CourseGetResponse>, I>>(object: I): CourseGetResponse {
    const message = createBaseCourseGetResponse();
    message.course = (object.course !== undefined && object.course !== null)
      ? Course.fromPartial(object.course)
      : undefined;
    message.message = object.message ?? "";
    message.from_cache = object.from_cache ?? false;
    return message;
  },
};

export type CourseServiceService = typeof CourseServiceService;
export const CourseServiceService = {
  /** Upload courses from CSV data */
  uploadCourses: {
    path: "/course.CourseService/UploadCourses",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CourseUploadRequest): Buffer => Buffer.from(CourseUploadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CourseUploadRequest => CourseUploadRequest.decode(value),
    responseSerialize: (value: CourseUploadResponse): Buffer =>
      Buffer.from(CourseUploadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CourseUploadResponse => CourseUploadResponse.decode(value),
  },
  /** Search courses using Elasticsearch */
  searchCourses: {
    path: "/course.CourseService/SearchCourses",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CourseSearchRequest): Buffer => Buffer.from(CourseSearchRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CourseSearchRequest => CourseSearchRequest.decode(value),
    responseSerialize: (value: CourseSearchResponse): Buffer =>
      Buffer.from(CourseSearchResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CourseSearchResponse => CourseSearchResponse.decode(value),
  },
  /** Get course by ID (with Redis caching) */
  getCourse: {
    path: "/course.CourseService/GetCourse",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CourseGetRequest): Buffer => Buffer.from(CourseGetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CourseGetRequest => CourseGetRequest.decode(value),
    responseSerialize: (value: CourseGetResponse): Buffer => Buffer.from(CourseGetResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CourseGetResponse => CourseGetResponse.decode(value),
  },
} as const;

export interface CourseServiceServer extends UntypedServiceImplementation {
  /** Upload courses from CSV data */
  uploadCourses: handleUnaryCall<CourseUploadRequest, CourseUploadResponse>;
  /** Search courses using Elasticsearch */
  searchCourses: handleUnaryCall<CourseSearchRequest, CourseSearchResponse>;
  /** Get course by ID (with Redis caching) */
  getCourse: handleUnaryCall<CourseGetRequest, CourseGetResponse>;
}

export interface CourseServiceClient extends Client {
  /** Upload courses from CSV data */
  uploadCourses(
    request: CourseUploadRequest,
    callback: (error: ServiceError | null, response: CourseUploadResponse) => void,
  ): ClientUnaryCall;
  uploadCourses(
    request: CourseUploadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CourseUploadResponse) => void,
  ): ClientUnaryCall;
  uploadCourses(
    request: CourseUploadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CourseUploadResponse) => void,
  ): ClientUnaryCall;
  /** Search courses using Elasticsearch */
  searchCourses(
    request: CourseSearchRequest,
    callback: (error: ServiceError | null, response: CourseSearchResponse) => void,
  ): ClientUnaryCall;
  searchCourses(
    request: CourseSearchRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CourseSearchResponse) => void,
  ): ClientUnaryCall;
  searchCourses(
    request: CourseSearchRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CourseSearchResponse) => void,
  ): ClientUnaryCall;
  /** Get course by ID (with Redis caching) */
  getCourse(
    request: CourseGetRequest,
    callback: (error: ServiceError | null, response: CourseGetResponse) => void,
  ): ClientUnaryCall;
  getCourse(
    request: CourseGetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CourseGetResponse) => void,
  ): ClientUnaryCall;
  getCourse(
    request: CourseGetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CourseGetResponse) => void,
  ): ClientUnaryCall;
}

export const CourseServiceClient = makeGenericClientConstructor(
  CourseServiceService,
  "course.CourseService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CourseServiceClient;
  service: typeof CourseServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
