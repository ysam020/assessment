// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: course.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { makeGenericClientConstructor, } from "@grpc/grpc-js";
export const protobufPackage = "course";
function createBaseCourseUploadRequest() {
    return { courses: [] };
}
export const CourseUploadRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.courses) {
            CourseData.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseUploadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.courses.push(CourseData.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e) => CourseData.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courses?.length) {
            obj.courses = message.courses.map((e) => CourseData.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CourseUploadRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseUploadRequest();
        message.courses = object.courses?.map((e) => CourseData.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCourseData() {
    return {
        course_id: "",
        title: "",
        description: "",
        category: "",
        instructor: "",
        duration: "",
        skill_level: "",
        tags: [],
    };
}
export const CourseData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.course_id !== "") {
            writer.uint32(10).string(message.course_id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.instructor !== "") {
            writer.uint32(42).string(message.instructor);
        }
        if (message.duration !== "") {
            writer.uint32(50).string(message.duration);
        }
        if (message.skill_level !== "") {
            writer.uint32(58).string(message.skill_level);
        }
        for (const v of message.tags) {
            writer.uint32(66).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.course_id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.instructor = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.duration = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.skill_level = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            course_id: isSet(object.course_id) ? globalThis.String(object.course_id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
            duration: isSet(object.duration) ? globalThis.String(object.duration) : "",
            skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.course_id !== "") {
            obj.course_id = message.course_id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.instructor !== "") {
            obj.instructor = message.instructor;
        }
        if (message.duration !== "") {
            obj.duration = message.duration;
        }
        if (message.skill_level !== "") {
            obj.skill_level = message.skill_level;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        return obj;
    },
    create(base) {
        return CourseData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseData();
        message.course_id = object.course_id ?? "";
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.category = object.category ?? "";
        message.instructor = object.instructor ?? "";
        message.duration = object.duration ?? "";
        message.skill_level = object.skill_level ?? "";
        message.tags = object.tags?.map((e) => e) || [];
        return message;
    },
};
function createBaseCourseUploadResponse() {
    return { success: false, message: "", courses_uploaded: 0, courses_indexed: 0 };
}
export const CourseUploadResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.courses_uploaded !== 0) {
            writer.uint32(24).int32(message.courses_uploaded);
        }
        if (message.courses_indexed !== 0) {
            writer.uint32(32).int32(message.courses_indexed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseUploadResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.courses_uploaded = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.courses_indexed = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            courses_uploaded: isSet(object.courses_uploaded) ? globalThis.Number(object.courses_uploaded) : 0,
            courses_indexed: isSet(object.courses_indexed) ? globalThis.Number(object.courses_indexed) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.courses_uploaded !== 0) {
            obj.courses_uploaded = Math.round(message.courses_uploaded);
        }
        if (message.courses_indexed !== 0) {
            obj.courses_indexed = Math.round(message.courses_indexed);
        }
        return obj;
    },
    create(base) {
        return CourseUploadResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseUploadResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        message.courses_uploaded = object.courses_uploaded ?? 0;
        message.courses_indexed = object.courses_indexed ?? 0;
        return message;
    },
};
function createBaseCourseSearchRequest() {
    return { query: "", category: "", instructor: "", skill_level: "", limit: 0, offset: 0 };
}
export const CourseSearchRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.category !== "") {
            writer.uint32(18).string(message.category);
        }
        if (message.instructor !== "") {
            writer.uint32(26).string(message.instructor);
        }
        if (message.skill_level !== "") {
            writer.uint32(34).string(message.skill_level);
        }
        if (message.limit !== 0) {
            writer.uint32(40).int32(message.limit);
        }
        if (message.offset !== 0) {
            writer.uint32(48).int32(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseSearchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.instructor = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.skill_level = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? globalThis.String(object.query) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
            skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== "") {
            obj.query = message.query;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.instructor !== "") {
            obj.instructor = message.instructor;
        }
        if (message.skill_level !== "") {
            obj.skill_level = message.skill_level;
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return CourseSearchRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseSearchRequest();
        message.query = object.query ?? "";
        message.category = object.category ?? "";
        message.instructor = object.instructor ?? "";
        message.skill_level = object.skill_level ?? "";
        message.limit = object.limit ?? 0;
        message.offset = object.offset ?? 0;
        return message;
    },
};
function createBaseCourse() {
    return {
        id: "",
        course_id: "",
        title: "",
        description: "",
        category: "",
        instructor: "",
        duration: "",
        skill_level: "",
        tags: [],
        relevance_score: 0,
    };
}
export const Course = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.course_id !== "") {
            writer.uint32(18).string(message.course_id);
        }
        if (message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.category !== "") {
            writer.uint32(42).string(message.category);
        }
        if (message.instructor !== "") {
            writer.uint32(50).string(message.instructor);
        }
        if (message.duration !== "") {
            writer.uint32(58).string(message.duration);
        }
        if (message.skill_level !== "") {
            writer.uint32(66).string(message.skill_level);
        }
        for (const v of message.tags) {
            writer.uint32(74).string(v);
        }
        if (message.relevance_score !== 0) {
            writer.uint32(85).float(message.relevance_score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.course_id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.instructor = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.duration = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.skill_level = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 85) {
                        break;
                    }
                    message.relevance_score = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            course_id: isSet(object.course_id) ? globalThis.String(object.course_id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            instructor: isSet(object.instructor) ? globalThis.String(object.instructor) : "",
            duration: isSet(object.duration) ? globalThis.String(object.duration) : "",
            skill_level: isSet(object.skill_level) ? globalThis.String(object.skill_level) : "",
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            relevance_score: isSet(object.relevance_score) ? globalThis.Number(object.relevance_score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.course_id !== "") {
            obj.course_id = message.course_id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.instructor !== "") {
            obj.instructor = message.instructor;
        }
        if (message.duration !== "") {
            obj.duration = message.duration;
        }
        if (message.skill_level !== "") {
            obj.skill_level = message.skill_level;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.relevance_score !== 0) {
            obj.relevance_score = message.relevance_score;
        }
        return obj;
    },
    create(base) {
        return Course.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourse();
        message.id = object.id ?? "";
        message.course_id = object.course_id ?? "";
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.category = object.category ?? "";
        message.instructor = object.instructor ?? "";
        message.duration = object.duration ?? "";
        message.skill_level = object.skill_level ?? "";
        message.tags = object.tags?.map((e) => e) || [];
        message.relevance_score = object.relevance_score ?? 0;
        return message;
    },
};
function createBaseCourseSearchResponse() {
    return { courses: [], total_count: 0, message: "", from_cache: false };
}
export const CourseSearchResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.courses) {
            Course.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.total_count !== 0) {
            writer.uint32(16).int32(message.total_count);
        }
        if (message.message !== "") {
            writer.uint32(26).string(message.message);
        }
        if (message.from_cache !== false) {
            writer.uint32(32).bool(message.from_cache);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseSearchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.courses.push(Course.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.total_count = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.from_cache = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courses: globalThis.Array.isArray(object?.courses) ? object.courses.map((e) => Course.fromJSON(e)) : [],
            total_count: isSet(object.total_count) ? globalThis.Number(object.total_count) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            from_cache: isSet(object.from_cache) ? globalThis.Boolean(object.from_cache) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courses?.length) {
            obj.courses = message.courses.map((e) => Course.toJSON(e));
        }
        if (message.total_count !== 0) {
            obj.total_count = Math.round(message.total_count);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.from_cache !== false) {
            obj.from_cache = message.from_cache;
        }
        return obj;
    },
    create(base) {
        return CourseSearchResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseSearchResponse();
        message.courses = object.courses?.map((e) => Course.fromPartial(e)) || [];
        message.total_count = object.total_count ?? 0;
        message.message = object.message ?? "";
        message.from_cache = object.from_cache ?? false;
        return message;
    },
};
function createBaseCourseGetRequest() {
    return { course_id: "" };
}
export const CourseGetRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.course_id !== "") {
            writer.uint32(10).string(message.course_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.course_id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { course_id: isSet(object.course_id) ? globalThis.String(object.course_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.course_id !== "") {
            obj.course_id = message.course_id;
        }
        return obj;
    },
    create(base) {
        return CourseGetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseGetRequest();
        message.course_id = object.course_id ?? "";
        return message;
    },
};
function createBaseCourseGetResponse() {
    return { message: "", from_cache: false };
}
export const CourseGetResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.course !== undefined) {
            Course.encode(message.course, writer.uint32(10).fork()).join();
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.from_cache !== false) {
            writer.uint32(24).bool(message.from_cache);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourseGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.course = Course.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.from_cache = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            course: isSet(object.course) ? Course.fromJSON(object.course) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            from_cache: isSet(object.from_cache) ? globalThis.Boolean(object.from_cache) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.course !== undefined) {
            obj.course = Course.toJSON(message.course);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.from_cache !== false) {
            obj.from_cache = message.from_cache;
        }
        return obj;
    },
    create(base) {
        return CourseGetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourseGetResponse();
        message.course = (object.course !== undefined && object.course !== null)
            ? Course.fromPartial(object.course)
            : undefined;
        message.message = object.message ?? "";
        message.from_cache = object.from_cache ?? false;
        return message;
    },
};
export const CourseServiceService = {
    /** Upload courses from CSV data */
    uploadCourses: {
        path: "/course.CourseService/UploadCourses",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CourseUploadRequest.encode(value).finish()),
        requestDeserialize: (value) => CourseUploadRequest.decode(value),
        responseSerialize: (value) => Buffer.from(CourseUploadResponse.encode(value).finish()),
        responseDeserialize: (value) => CourseUploadResponse.decode(value),
    },
    /** Search courses using Elasticsearch */
    searchCourses: {
        path: "/course.CourseService/SearchCourses",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CourseSearchRequest.encode(value).finish()),
        requestDeserialize: (value) => CourseSearchRequest.decode(value),
        responseSerialize: (value) => Buffer.from(CourseSearchResponse.encode(value).finish()),
        responseDeserialize: (value) => CourseSearchResponse.decode(value),
    },
    /** Get course by ID (with Redis caching) */
    getCourse: {
        path: "/course.CourseService/GetCourse",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CourseGetRequest.encode(value).finish()),
        requestDeserialize: (value) => CourseGetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(CourseGetResponse.encode(value).finish()),
        responseDeserialize: (value) => CourseGetResponse.decode(value),
    },
};
export const CourseServiceClient = makeGenericClientConstructor(CourseServiceService, "course.CourseService");
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=course.js.map